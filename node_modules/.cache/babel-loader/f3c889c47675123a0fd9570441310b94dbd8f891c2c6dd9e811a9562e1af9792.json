{"ast":null,"code":"var _jsxFileName = \"/home/ryan/JavaScript/Udemy/React/expense-app/src/components/Graph/GraphBar.jsx\";\nimport './GraphBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GraphBar(props) {\n  // The fillGraphBar variable will be passed as a (style) 'height: percentage' filling a div container for each month\n  let fillGraphBar = '0%';\n\n  // If props.value and props.maxValue are equal then 100% of the bar is filled\n  // If props.value is 25 and props.maxValue is 100 then 25% of the bar is filled\n  if (props.maxValue > 0) {\n    fillGraphBar = Math.round(props.value / props.maxValue * 100) + '%';\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-bar__inner\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        // The graph-bar__fill div displays and visibly fills the graph-bar__inner container by percentage\n        className: \"graph-bar__fill\",\n        style: {\n          height: fillGraphBar\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-bar__label\",\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_c = GraphBar;\n;\nexport default GraphBar;\nvar _c;\n$RefreshReg$(_c, \"GraphBar\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","GraphBar","props","fillGraphBar","maxValue","Math","round","value","className","children","style","height","fileName","_jsxFileName","lineNumber","columnNumber","label","_c","$RefreshReg$"],"sources":["/home/ryan/JavaScript/Udemy/React/expense-app/src/components/Graph/GraphBar.jsx"],"sourcesContent":["import './GraphBar.css'\n\nfunction GraphBar(props) {\n    // The fillGraphBar variable will be passed as a (style) 'height: percentage' filling a div container for each month\n    let fillGraphBar = '0%';\n\n    // If props.value and props.maxValue are equal then 100% of the bar is filled\n    // If props.value is 25 and props.maxValue is 100 then 25% of the bar is filled\n    if (props.maxValue > 0) {\n        fillGraphBar = Math.round((props.value / props.maxValue) * 100) + '%';\n    }\n\n    return (\n        <div className='graph-bar'>\n            {/*The graph-bar__inner div acts as the container for the actual bar for each month */}\n            <div className='graph-bar__inner'>\n                <div\n                    // The graph-bar__fill div displays and visibly fills the graph-bar__inner container by percentage\n                    className='graph-bar__fill'\n                    style={{ height: fillGraphBar }}\n                ></div>\n            </div>\n            {/*The label represents the caption for each month that displays under each bar*/}\n            <div className='graph-bar__label'>{props.label}</div>\n        </div>\n    );\n};\n\nexport default GraphBar;"],"mappings":";AAAA,OAAO,gBAAgB;AAAA,SAAAA,MAAA,IAAAC,OAAA;AAEvB,SAASC,QAAQA,CAACC,KAAK,EAAE;EACrB;EACA,IAAIC,YAAY,GAAG,IAAI;;EAEvB;EACA;EACA,IAAID,KAAK,CAACE,QAAQ,GAAG,CAAC,EAAE;IACpBD,YAAY,GAAGE,IAAI,CAACC,KAAK,CAAEJ,KAAK,CAACK,KAAK,GAAGL,KAAK,CAACE,QAAQ,GAAI,GAAG,CAAC,GAAG,GAAG;EACzE;EAEA,oBACIJ,OAAA;IAAKQ,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAEtBT,OAAA;MAAKQ,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC7BT,OAAA;QACI;QACAQ,SAAS,EAAC,iBAAiB;QAC3BE,KAAK,EAAE;UAAEC,MAAM,EAAER;QAAa;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENf,OAAA;MAAKQ,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAEP,KAAK,CAACc;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEd;AAACE,EAAA,GAxBQhB,QAAQ;AAwBhB;AAED,eAAeA,QAAQ;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}